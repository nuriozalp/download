server.port=7191
server.tomcat.max-connections=200
#msf sales order setting
customer.plantId=121
customer.productionPlan.external=false
customerName=hajdu-auto
customer.worker.contract=11
customer.worker.password=1111
customer.worker.id=10101513D
# To active confirmation set this property true. This is root level to de-active all confirmation
customer.confirm=false
# To active job confirm set this property true,: Not: customer.confirm should be true.
customer.confirm.job=false


# please use NAVISION for the navision erp 
# use  IFS for IFS erp 
customer.erp.model=IFS

###########################
###  Fetching product tree can be problematic. Some customer has over 100 thousand data and it is not possible to fetch
# product tree without where clauses. So you must define fetch method, Default fetch method is 0
## -1 for Fetch all product tree data from customer db
##  0 for Fetch first Final Material from Materials table then fetch product tree by final material code
##  1 for Fetch first distinct Final material code from Product Tree Tables then fetch product tree by final material code
customer.productTree.fetch.method=1


### JOB ORDER OPERATION ORDER BY
# we need exact job order. Some times it is hard to define job order with same way for all customer.
# Oracle and MySQL allow you to put order by to view, but MS SQL doesnt allow you to put order by to view.
# Sometimes they have different columns to make order by and unfortunately making a specific colon is not enough for order by
# because we need order as int and given string  operation_no can be bigger than max int values.
customer.database.job.orderBy.sql= order by PROD_ORDER_REF_ID, OPERATION_NO DESC
###

####### Filter SQ L######
## Here for some repository filter option added. To add filter sql your sql must start with 'and'
## in sql there is already where 1=1 clouse added so when you add and filter your sql will be like
## where 1=1 and PROD_ORDER_REF_ID='33455'

#customer.database.milestone.filter.sql= and PROJECT_NO='RP21-0081'
#customer.database.job.filter.sql= and PROD_ORDER_REF_ID='361991'
customer.database.productTree.filter.sql=
customer.database.purchase.filter.sql=
customer.database.productTree.filterFinalMaterial.sql=

#### purchase order update all date on every some time
## this field needed for hajdu. Some times their purchase data changed but they are not updating last modified date
customer.purchaseOrder.getAllDataEverySomeTimeActive=true
## On every which count  purchase should get all. min should be 3
customer.purchaseOrder.getAllDataEveryAfterUpdateCount=3
## on after how many job update production plan should be triggered defualt is 30
customer.productionPlan.updateEverJobUpdateCount=30


#MSF DB config
spring.datasource.url=jdbc:mysql://localhost:3306/das_new?useLocalSessionState=true&useUnicode=true&useLocalTransactionState=true&autoReconnect=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&autoReconnect=true&useSSL=false&zeroDateTimeBehavior=CONVERT_TO_NULL
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=root123??..ABC1234
spring.datasource.tomcat.initial-size=5
spring.datasource.tomcat.max-wait=200000
spring.datasource.tomcat.max-active=20
spring.datasource.tomcat.max-idle=5
spring.datasource.tomcat.min-idle=1
spring.datasource.tomcat.default-auto-commit=false
spring.datasource.tomcat.test-on-borrow=false
spring.datasource.tomcat.max-age= 200000
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.tomcat.test-while-idle=true
spring.datasource.tomcat.time-between-eviction-runs-millis=60000
spring.datasource.tomcat.validation-query=SELECT 1
hibernate.integration.envers.enabled=false

#Customer DB config 
database2.datasource.url=jdbc:oracle:thin:@172.22.1.38:1521/haidb
database2.datasource.driverClassName=oracle.jdbc.OracleDriver
database2.datasource.username=Mes
database2.datasource.password=mes2021
database2.datasource.tomcat.initial-size=5
database2.datasource.tomcat.max-wait=200000
database2.datasource.tomcat.max-active=20
database2.datasource.tomcat.max-idle=5
database2.datasource.tomcat.min-idle=1
database2.datasource.tomcat.default-auto-commit=false
database2.datasource.tomcat.test-on-borrow=false
database2.datasource.tomcat.max-age= 200000
database2.datasource.tomcat.connection-properties=defaultBatchValue=2000;defaultRowPrefetch=2000
database2.datasource.tomcat.time-between-eviction-runs-millis=60000
database2.datasource.tomcat.test-while-idle=true
database2.datasource.tomcat.validation-query=SELECT * from dual


#database2.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver
#database3.datasource.url=jdbc:oracle:thin:172.22.1.38:11521/haidbt2
database3.datasource.url=jdbc:oracle:thin:@172.22.1.38:1521/haidb
database3.datasource.driverClassName=oracle.jdbc.OracleDriver
database3.datasource.username=Mes
database3.datasource.password=mes2021
database3.datasource.tomcat.initial-size=5
database3.datasource.tomcat.max-wait=200000
database3.datasource.tomcat.max-active=20
database3.datasource.tomcat.max-idle=5
database3.datasource.tomcat.min-idle=1
database3.datasource.tomcat.default-auto-commit=false
database3.datasource.tomcat.test-on-borrow=false
database3.datasource.tomcat.max-age= 200000
# Keep the connection alive if idle for a long time (needed in production)
database3.datasource.tomcat.test-while-idle=true
database3.datasource.tomcat.time-between-eviction-runs-millis=60000
database3.datasource.tomcat.validation-query=SELECT * from dual

#servertables
#1 standart database pull/push, 2 json rest api, 3 IFS, 4 SAP, 5 MS Dynamic
entegrationType=1

#customer setting
customer.basicToken=YmV0ZXg6c2VjcmV0
customer.tokenURL=http://172.19.1.1:6199/oauth/token
customer.username=admin
customer.password=meryem

#grant type is case sensitive. So I put type name here
customer.grant_typeName=grant_type

######################################################
# CUSTOMER DB TABLES
customer.database.saleOrderItemTable=MES_PRODUCTION_PLAN
customer.database.jobOrderOperationTable=MES_JOB_ORDER_OPERATIONS
#customer.database.materialTable=MES_MATERIALS
#customer.database.productionPlanTable=MES_PRODUCTION_PLAN
customer.database.employeeTable=MES_EMPLOYEES
#customer.database.operationWorkstationTable=MES_OPERATION_WORKSTATIONS
#customer.database.stopCauseTables=MES_STOP_CAUSES
customer.database.scrapCauseTable=MES_SCRAP_CAUSES
#customer.database.reworkCauseTable=
customer.database.purchaseOrderTable=MES_PURCHASE_ORDERS
#customer.database.workstationTable=MES_WORKSTATIONS
#customer.database.productTreeTable=MES_PRODUCT_TREE
customer.database.warehouseStockTable=MES_WAREHOUSE_STOCKS
customer.database.workCenterCalendarTable=mes_workcenter_calendar
customer.database.maintenanceTable=VW_MAINTENANCE_ORDERS
customer.database.deletedObject=MES_DELETED_OBJECTS
customer.database.processingJobTable=MES_PROCESSING_JOB_ORDERS
customer.database.confirmWarehouseStockTable=MES_WAREHOUSE_STOCKS
customer.database.jobOrderOperationConfirmationTable=MES_JOB_ORDER_OPERATIONS
customer.database.employeeRoleGroup=MES_EMPLOYEE_GROUPS
customer.database.employeeRoleScrapTypeGroup=mes_scrap_type_roles
customer.database.deletedOrCancelledMaintenanceObjectTable=MES_DELETED_MAINTENANCE_ORDERS
######################################################
# CALL BACK
customer.request.operations.URL=
customer.request.materials.URL=
customer.request.employees.URL=
customer.request.workstations.URL=
#customer.request.productionOrders.URL=http://localhost:7189/integration/filter/prodOrders
#customer.request.productionOrders.URL=http://108.61.178.52:7189/integration/filter/prodOrders
customer.request.salesOrderItems.URL=
customer.request.stopCauses.URL=
customer.request.scrapCauses.URL=
customer.request.reworkCauses.URL=
customer.request.maintenances.URL=
######################################################
# PUSHBACK
customer.pushback.productionOrders.URL=
customer.pushback.salesOrderItems.URL=

######################################################
#SCHEDULING PARAMETERS
# number unit is milliseconds.
customer.workstation.sync.schedule=90000000
customer.employee.sync.schedule=3200000
customer.jobOrderOperation.sync.schedule=180000
customer.warehouseStock.sync.schedule=60000
customer.productionOrders.sync.schedule=800000
customer.salesOrderItems.sync.schedule=6000000
customer.reworkCauses.sync.schedule=300000
customer.scrapCauses.sync.schedule=300000
customer.stopCauses.sync.schedule=300000
customer.material.sync.schedule=90000000
customer.operation.sync.schedule=300000
customer.productTree.sync.schedule=90000000
customer.purchaseOrder.sync.schedule=800000
customer.productionPlan.sync.schedule=3800000
customer.projectMilestone.sync.schedule=30000
customer.workCenterCalendar.sync.schedule=90000000
customer.projectTasks.sync.schedule=800000
customer.maintenance.sync.schedule=900000
customer.goodsMovement.sync.schedule=300000
customer.bom.sync.schedule=3000000
customer.routing.sync.schedule=3000000
customer.employeeRoleGroup.sync.schedule=5000000
######################################################
#  START UP QUERY RANGE SETTINGS
# Use -1 one for no time limit. Get all the records for integration
# number unit is day.
# if number different from -1, algorithm will first check last record update date and query new records after last update
# if there is no last record, then algorithm will query record from entered days ago.
customer.production.plans.sync.query.firstTime.day=-1
customer.jobOrderOperation.sync.query.firstTime.day=20
customer.stopCauses.sync.query.firstTime.day=1
customer.scrapCauses.sync.query.firstTime.day=1
customer.reworkCauses.sync.query.firstTime.day=-1
customer.workstations.sync.query.firstTime.day=1
customer.warehouse.stocks.sync.query.firstTime.day=-1
customer.materials.sync.query.firstTime.day=20
customer.operationWorkstation.sync.query.firstTime.day=1
customer.productTree.sync.query.firstTime.day=-1
customer.purchaseOrder.sync.query.firstTime.day=-1
customer.maintenance.sync.query.firstTime.day=-1
customer.goodsMovement.sync.query.firstTime.day=1 
customer.prodorder.sync.query.lastTime.day=90
customer.bom.sync.query.firstTime.day=-1
customer.routing.sync.query.firstTime.day=-1
customer.salesorder.sync.query.startTime.day=60

######################################################

######################################################
# divide is used to divide fetched rows and sleep is used to wait between each divide count data sent over rabbit
# For example if 200 data fetched for employee and divide is 25 and sleep is 10000ms
# Employee data will be sent at 200/25= 4 cycle and on each cycle will wait 10 seconds.
customer.employee.sync.sleep=3000000
customer.employee.sync.divide=300
customer.jobOrderOperation.sync.sleep=800
customer.jobOrderOperation.sync.divide=1
customer.material.sync.sleep=7000
customer.material.sync.divide=80
customer.purchaseOrder.sync.sleep=10000
customer.purchaseOrder.sync.divide=10
customer.warehouseStock.sync.sleep=5000
customer.warehouseStock.sync.divide=300
customer.productionPlans.sync.sleep=1000
customer.productionPlans.sync.divide=5
customer.productTree.sync.divide=20
customer.productTree.sync.sleep=5000
customer.workstation.sync.divide=25
customer.workstation.sync.sleep=4000
customer.maintenance.sync.divide=25
customer.maintenance.sync.sleep=16000
customer.workCenterCalendar.sync.divide=15000
customer.workCenterCalendar.sync.sleep=2400000
customer.goodsMovement.sync.sleep=10000
customer.goodsMovement.sync.divide=25
customer.bom.sync.sleep=7000
customer.bom.sync.divide=20
customer.routing.sync.sleep=7000
customer.routing.sync.divide=20
######################################################


spring.security.user.name=msf
spring.security.user.password=msf2021

#spring.jpa.hibernate.ddl-auto =update

# Keep the connection alive if idle for a long time (needed in production)
security.oauth2.resource.filter-order=3
management.security.enabled=false
# JPA properties
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.jpa.database=mysql

spring.jpa.openInView=false
spring.jpa.show-sql=true
spring.jpa.generate-ddl=false
#spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

#spring.jpa.hibernate.ddl-auto=update


logging.level.org.springframework.web=INFO
logging.level.guru.springframework.blogs.controllers=INFO
logging.file.name=logs/filename.log

#show sql statement
logging.level.org.hibernate.SQL=INFO
#show sql values
logging.level.org.hibernate.type.descriptor.sql=INFO

#logging.level.org.hibernate=debug
##show sql statement
#logging.level.org.hibernate.SQL=debug
##show sql values
#logging.level.org.hibernate.type.descriptor.sql=trace


authentication.oauth.clientid=betex
authentication.oauth.secret=secret
authentication.oauth.tokenValidityInSeconds=3600


spring.mail.host = 108.61.178.52
spring.mail.port=25
mail-default-from=dass_smart_factory@dasssmart.com


#512 * 1024
websocket.maxTextMessageBufferSize=524288
websocket.maxBinaryMessageBufferSize=524288
#10 minute
websocket.maxSessionIdleTimeout=600000
websocket.maxfixedWebsocketConfigThreadPool=50
websocket.maxfixedCouponServiceThreadPool=100

# RABBIT (RabbitProperties)
spring.rabbitmq.host=172.19.1.1
spring.rabbitmq.port=5672
spring.rabbitmq.username=dass
spring.rabbitmq.password=dass123456
#spring.rabbitmq.virtualHost=/

# Additional RabbitMQ properties
spring.rabbitmq.listener.simple.concurrency=4
spring.rabbitmq.listener.simple.max-concurrency=8
spring.rabbitmq.listener.simple.retry.initial-interval=1000
spring.rabbitmq.listener.simple.retry.max-attempts=1000000
spring.rabbitmq.connection-timeout=0
####################################################


config.oauth2.privateKey=\
-----BEGIN RSA PRIVATE KEY-----\
MIIEowIBAAKCAQEAvjciQtPrluMlS9LxORUQY/SjW0p8l3mFkhu+EYFXlIz05iaP\
kj53KmyjvvcF5ikn80cv3W0YVXhK1d2wuiDDGiWVecK/VIj2JpNr6j2QYb4eQJbw\
JPstK2uyCAo6wRunrBzUJ0F58ySF6tTteslfnFfRJXPS7ArC9hPpOPXjABa8i4u8\
I6SBEGyTI1TWDZV0ru0YwsudRrvxYHe9d2g96G6PoqeBOR/37tbOp/ActaOB0t1C\
k6etau/ZzF4fXQiKgNAM3HeO+tgWiMngcuslyJyjhCODSH8J34GhVG6yrrYaRWbG\
Z4hUQNAuDg2nUsG0dajjnr6p8KD2x6ykgzxkdwIDAQABAoIBACkgjp3YaEXVkwjT\
8Sggb8zM5k0ky8+MjN7MdMogJymNWJ4ylDRQoT9hAf6WNoZPO74UFDtSDULdoYCg\
UEfOMaEDo1ASVYAXpPEuStT4vrEDhFL+z6mPTXLn9DRc0dtS+WvzR8O9GnsB2Jqv\
szErPSr2qdfpNR+oLAM8xt5z+8LWx+IYVv8e2IX8agWFiLTjwoO+th1dAvAyNQPF\
lc50bOcyAuh3aMOqTKrd/O8r3mcCadLEQ22A8yCH/Nlyfjlok+5kzATuhqGTakuX\
sgN1gpJQVx8uoxdBiDSy6DHQENbDYCDN7ByM5wGq5+KJ04loQ786i0SCL9vaDB6D\
On9BN4ECgYEA8IGfwup17WBGgMg7c802r6YUSmM0doYwbEU1AIT/G94xLyK1kEE9\
g1cD9csi5WcHxSPxmAFzVrH5tF8iq1dHBt2gn6KtbBGpYTVWU2/1rZVgRbSTTRjX\
pdYWos8TsR0b2jC5rJittT8QHHjMDJsGyQ1YBBBWbtp9otrVjCw4uCECgYEAyngf\
VZ/WdKvU/WZqrZ3WRWxDCesvznVLy9GKCRPmxyMVH4+MdWAJLwQ+9azpTIBGqmo7\
FRgtdk/U19Lr5R6Zx7rgCSSkYrgmSq4lAWkBkswGP/lNCT0xPyQi0jWR4UBM1oiy\
gRERHgC9eae5rADCBE/ijR5enOWdDzDRS6z6qZcCgYBlm94LU1MPPqWKsw2rFwAL\
pXbdFpyLlpXOqE6EMaw18eGFsHxUvbtnSdP6fB/6G1VFDLJ9Ld+0uOxuL+NN0EnJ\
tMivqOLrzWpqD0axaZO6CmnqCShSYjR5c8GMd0Ayi8HApOVM7hQ1hrcf0Ekk6jor\
pt+Ql/ZsTxLVQu8FkYlFAQKBgD1SPmNHgsNZW6vXvg2RVVk3XeJ+Kb+FBQzZDM6N\
CYNcm8QwTOEr0fw8c/kigpJZ840fmX9dED/aE+O+DRYau4ajkcETKPqBPY+2yJxx\
ujlEs8vibLOUpfqyrh0ufl1ThTIgureefKmynbBf3Ts8C4cUzs/g19T7MiNsrKcX\
399HAoGBALGJ9e47oQF3iSDBZ/KLGmTL+pkUjLY5RmCoDHE9WY0LAM7l9gYL1CpX\
wl6/GzmjTy1MnHaprrW15jO3IiZKn+7M5xzb7OKMPsHBcxrSBkbiPC1tSlbMdup7\
sUChu3UI/VQb30CezHx+DMrjBoZ0d6el6CVvikw5/cE4ez8nWSBC \
-----END RSA PRIVATE KEY-----


config.oauth2.publicKey=\
-----BEGIN PUBLIC KEY-----\
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvjciQtPrluMlS9LxORUQ\
Y/SjW0p8l3mFkhu+EYFXlIz05iaPkj53KmyjvvcF5ikn80cv3W0YVXhK1d2wuiDD\
GiWVecK/VIj2JpNr6j2QYb4eQJbwJPstK2uyCAo6wRunrBzUJ0F58ySF6tTteslf\
nFfRJXPS7ArC9hPpOPXjABa8i4u8I6SBEGyTI1TWDZV0ru0YwsudRrvxYHe9d2g9\
6G6PoqeBOR/37tbOp/ActaOB0t1Ck6etau/ZzF4fXQiKgNAM3HeO+tgWiMngcusl\
yJyjhCODSH8J34GhVG6yrrYaRWbGZ4hUQNAuDg2nUsG0dajjnr6p8KD2x6ykgzxk\
dwIDAQAB\
-----END PUBLIC KEY-----
